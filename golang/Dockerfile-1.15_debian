FROM debian:11

LABEL org.opencontainers.image.authors="EWZ Engineering <engineering@mytens.co.id>"
LABEL io.k8s.description="Debian (11)"
LABEL io.k8s.display-name="Debian (11)"
LABEL io.openshift.non-scalable="false"
LABEL io.openshift.tags="builder,debian,golang"
LABEL summary="Virtual Machine (VM) like container platform with Golang 1.15"
LABEL vendor="Debian"
LABEL release="1"

ENV LANG="C.UTF-8" \
    LC_ALL="C.UTF-8" \
    TZ="Asia/Jakarta" \
    DEBIAN_FRONTEND="noninteractive" \
    PATH=/go/bin:/usr/local/go/bin:${PATH}

ENV GOLANG_VERSION="1.15.15" \
    GOPATH="/go"

WORKDIR /usr/src/app

# Install prerequisites
RUN apt-get update \
      && apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        netbase \
        wget
RUN if ! command -v gpg > /dev/null; then \
      apt-get update \
        && apt-get install -y --no-install-recommends \
          gnupg \
          dirmngr; \
    fi
RUN apt-get install -y --no-install-recommends \
      git \
      mercurial \
      openssh-client \
      subversion \
      procps
RUN apt-get install -y --no-install-recommends \
      g++ \
      gcc \
      libc6-dev \
      make \
      pkg-config

# Install golang
RUN arch="$(dpkg --print-architecture)"; \
    arch="${arch##*-}"; \
    url=; \
    case "${arch}" in \
      'amd64') \
        url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz"; \
        sha256='0885cf046a9f099e260d98d9ec5d19ea9328f34c8dc4956e1d3cd87daaddb345'; \
        ;; \
      'armel') \
        export GOARCH='arm' GOARM='5' GOOS='linux'; \
        ;; \
      'armhf') \
        url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-armv6l.tar.gz"; \
        sha256='7192603af50afb23c9d8cd14d2b2c19e0985a34d3eca685fa098df7893000d19'; \
        ;; \
      'arm64') \
        url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-arm64.tar.gz"; \
        sha256='714abb01af210473dd6af331094ad6847162eff81a7fc7241d24f5a85496c9fa'; \
        ;; \
      'i386') \
        url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-386.tar.gz"; \
        sha256='3310fb0e48b0907bb520f6e3c6dcff63cc0913b92a76456f12980d0eb13b77d4'; \
        ;; \
      'mips64el') \
        export GOARCH='mips64le' GOOS='linux'; \
        ;; \
      'ppc64el') \
        url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-ppc64le.tar.gz"; \
        sha256='37f3b99e21d0324a6583159e14e42e57e56561abbf7bf68bef3d8f57b29e39c0'; \
        ;; \
      's390x') \
        url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-s390x.tar.gz"; \
        sha256='eae39d97df6b758636d5427be0b083dbf9d49007b302825ac6c8645de039aaab'; \
        ;; \
      *) \
        echo >&2 "error: unsupported architecture '$arch' (likely packaging update needed)"; \
        exit 1 \
        ;; \
    esac; \
    build=; \
    if [ -z "${url}" ]; then \
      build=1; \
      url="https://dl.google.com/go/go${GOLANG_VERSION}.src.tar.gz"; \
      sha256='0662ae3813330280d5f1a97a2ee23bbdbe3a5a7cfa6001b24a9873a19a0dc7ec'; \
      echo >&2; \
      echo >&2 "warning: current architecture (${arch}) does not have a compatible Go binary release; will be building from source"; \
      echo >&2; \
    fi; \
    wget -O go.tgz.asc "${url}.asc"; \
    wget -O go.tgz "${url}" --progress=dot:giga; \
    echo "${sha256} *go.tgz" | sha256sum -c -; \
    GNUPGHOME="$(mktemp -d)"; \
    export GNUPGHOME; \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 'EB4C 1BFD 4F04 2F6D DDCC  EC91 7721 F63B D38B 4796'; \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys '2F52 8D36 D67B 69ED F998  D857 78BD 6547 3CB3 BD13'; \
    gpg --batch --verify go.tgz.asc go.tgz; \
    gpgconf --kill all; \
    rm -rf "${GNUPGHOME}" go.tgz.asc; \
    tar -C /usr/local -xzf go.tgz; \
    rm go.tgz; \
    if [ -n "${build}" ]; then \
      savedAptMark="$(apt-mark showmanual)"; \
      apt-get update; \
      apt-get install -y --no-install-recommends golang-go; \
      export GOCACHE='/tmp/gocache'; \
      (cd /usr/local/go/src; export GOROOT_BOOTSTRAP="$(go env GOROOT)" GOHOSTOS="${GOOS}" GOHOSTARCH="${GOARCH}"; ./make.bash;); \
      apt-mark auto '.*' > /dev/null; \
      apt-mark manual ${savedAptMark} > /dev/null; \
      apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
      rm -rf /var/lib/apt/lists/*; \
      rm -rf /usr/local/go/pkg/*/cmd \
          /usr/local/go/pkg/bootstrap \
          /usr/local/go/pkg/obj \
          /usr/local/go/pkg/tool/*/api \
          /usr/local/go/pkg/tool/*/go_bootstrap \
          /usr/local/go/src/cmd/dist/dist \
          "${GOCACHE}"; \
    fi; \
    go version

# Configure golang
RUN mkdir -p "${GOPATH}/src" "${GOPATH}/bin" \
      && chmod -R 777 "${GOPATH}"

# Install TZ
RUN apt-get install -y --no-install-recommends tzdata

# Cleanup
RUN apt-get clean -y \
    && apt-get autoclean -y \
    && rm -rf /var/cache/apt/*

